import express, { Router } from 'express'
import { body, validationResult } from 'express-validator'
import User from '../models/userModel.js'
import bcrypt from 'bcryptjs'
import jwt from 'jsonwebtoken'
import getuser from '../middleware/getuser.js'

const authRouter = express.Router()

// secret string for jwt token
const JWT_SECRET = 'somethingsecret'

// express validator conditions array
const signupConditions = [
    body('name', 'Enter a valid name').isLength({ min: 1 }),
    body('email', 'Enter a valid email').isEmail(),
    body('password', 'Password must be atleast 5 characters').isLength({ min: 4 })
]
const signinConditions = [
    body('email', 'Enter a valid email').isEmail(),
    // body('password', 'Password must be atleast 5 characters').isLength({ min: 4 })
]
// ********** Signup ***********
//* url: api/auth/signup'
authRouter.post('/signup', signupConditions, async (req, res) => { // async req,res
    let success = false
    const errors = validationResult(req) // validation result using express validator
    // if there are errors, if conditions are not fulfilled
    if (!errors.isEmpty()) {
        // sending errors object in json which contains an array returned form validationResult
        return res.status(400).json({ success, errors: errors.array() })
    }
    // otherwise find whether this email already exists
    try {

        let user = await User.findOne({ email: req.body.email })
        // if email already exists
        if (user) {
            return res.status(400).json({ success, error: 'Sorry! A user with this email already exists' })
        }

        // otherwise construct new user from User model which takes data from req.body
        // salt for bcrypt authentication
        const salt = await bcrypt.genSalt(10)
        // hashing password adding salt on it => hash(password+salt)
        const safePass = await bcrypt.hash(req.body.password, salt)
        // creating user
        user = await User.create({
            name: req.body.name,
            password: safePass, // bcrypted, salt and hashing added
            email: req.body.email
        }
        )

        // data for JWT token
        const data = {
            user: {
                id: user.id // id generated by mongodb
            }
        }
        // assigning token using jwt.sign method
        const authtoken = jwt.sign(data, JWT_SECRET)
        console.log(authtoken)
        success = true
        // sending jwt token to user
        res.json({ success, authtoken })
    } catch (error) {
        console.error(error.message)
        res.status(500).send(success,'Inernal Server Error')
    }
})

// ********** Signin **********
//  * api/auth/signin
authRouter.post('/signin', signinConditions, async (req, res) => {
    let success = false
    const errors = validationResult(req) // validation result using express validator
    // if there are errors, if conditions are not fulfilled
    if (!errors.isEmpty()) {
        return res.status(400).json({ success, errors: errors.array() })
    }
    // otherwise find whether this email already exists
    const { email, password } = req.body
    try {
        let user = await User.findOne({ email })
        // if email doesn't exists
        if (!user) {
            return res.status(400).json({ success, error: 'Please try to signin using correct email and password' })
        }
        const passwordCompare = await bcrypt.compare(password, user.password)
        if (!passwordCompare) {
            return res.status(400).json({ success, error: 'Please try to signin using correct email and password' })
        }
        const payload = {
            user: {
                id: user.id
            }
        }
        success = true
        const authtoken = jwt.sign(payload, JWT_SECRET)
        res.json({success,authtoken})


    } catch (error) {
        console.error(error.message)
        res.status(500).send(success,'Internal Server Error')
    }
})

// ********* Get User *********
//* api/auth/getuser

authRouter.post('/getuser', getuser, async (req,res)=>{
    try {
        const userId = req.user.id
        // find user by id and fetch all data except password
        const user = await User.findById(userId).select('-password')
        res.send(user)
    } catch (error) {
        console.error(error.message)
        res.status(500).send('Internal Server Error!')
    }
} )

export default authRouter